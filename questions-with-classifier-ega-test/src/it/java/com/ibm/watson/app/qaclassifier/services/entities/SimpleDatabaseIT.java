/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ibm.watson.app.qaclassifier.services.entities;

import static org.junit.Assert.assertNotNull;

import javax.persistence.EntityManager;

import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.ibm.watson.app.qaclassifier.rest.ClassifierRestModule;
import com.ibm.watson.app.qaclassifier.rest.model.Answer.TypeEnum;
import com.ibm.watson.app.qaclassifier.services.ClassifierServicesModule;
import com.ibm.watson.app.common.persistence.jpa.impl.ApplicationPersistenceModule;
import com.ibm.watson.app.common.persistence.jpa.ApplicationTransaction;
import com.ibm.watson.app.common.persistence.jpa.PersistenceEntityProvider;


@Ignore("This test requires a persistence.xml persistence unit with transaction type = RESOURCE_LOCAL")
public class SimpleDatabaseIT {    
    private static PersistenceEntityProvider provider;    
    private static Injector injector;
    
    @BeforeClass
    public static void setUp() {
        injector = Guice.createInjector(new ClassifierRestModule(), new ClassifierServicesModule(), new ApplicationPersistenceModule("com.ibm.watson.app.qaclassifier.db"));
        provider = injector.getInstance(PersistenceEntityProvider.class);
        
        // Add a bunch of answers that could be in our GT
        EntityManager em = provider.getEntityManager();
        ApplicationTransaction et = provider.getTransaction(em);
        et.begin();
        for(int i = 1; i < 66; i++) {
            AnswerEntity answer = new AnswerEntity();
            answer.setAnswerClass("{class" + i + "}");
            answer.setAnswerType(TypeEnum.TEXT);
            answer.setAnswerText("This answer was autogenerated for a mapping to class number " + i);
            answer.setCanonicalQuestion("This canonical question was autogenerated for a mapping to class number " + i);
            em.merge(answer);
        }
        et.commit();
        em.close();
    }

    @Test
    public void fetch_an_answer_out_from_the_database() {
        EntityManager em = provider.getEntityManager();
        AnswerEntity answer = em.find(AnswerEntity.class, "{class1}");
        assertNotNull(answer);
    }
}
